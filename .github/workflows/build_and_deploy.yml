name: CI_CD
on:
  push:
    tags:
      - "*"
    branches:
      - 'main'
      - 'master'

env:
  APP_NAME: spring-boot-native-image

jobs:
  build-jar:
    name: 'Build JAR'
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2
      - name: 'Setup Java 17'
        uses: actions/setup-java@v1
        with:
          java-version: 17
      - name: 'Build JAR'
        run: |
          mvn clean package
          cp target/$APP_NAME-*.jar target/$APP_NAME.jar
          ls -l target/
      - name: 'Environment'
        id: environment
        run: |
          PROJECT_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "PROJECT_VERSION: $PROJECT_VERSION"
          echo ::set-output name=PROJECT_VERSION::$PROJECT_VERSION
          JAR_FILENAME=$(basename $(ls target/$APP_NAME-*.jar))
          echo "JAR_FILENAME: $JAR_FILENAME"
          echo ::set-output name=JAR_FILENAME::$JAR_FILENAME
      - uses: actions/upload-artifact@v2
        with:
          name: artifact
          path: target/${{env.APP_NAME}}.jar
      - name: 'Publish JAR to release'
        if: contains(github.ref, 'tags')
        uses: xresloader/upload-to-github-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          file: target/${{ steps.environment.outputs.JAR_FILENAME }}
          tags: true
          draft: false
          overwrite: true

  build-native-image:
    name: 'Build native Image'
    needs: [build-jar]
    if: contains(github.ref, 'tags')
    strategy:
      matrix:
        os: ['ubuntu-latest', 'macos-latest', 'windows-latest']
        include:
          - os: 'ubuntu-latest'
            label: 'linux'
            executable_extension: ''
          - os: 'macos-latest'
            label: 'macos'
            executable_extension: ''
          - os: 'windows-latest'
            label: 'windows'
            executable_extension: '.exe'
    runs-on: ${{matrix.os}}
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
          name: artifact
      - name: 'Environment'
        id: environment
        run: |
          PROJECT_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "PROJECT_VERSION: $PROJECT_VERSION"
          echo ::set-output name=PROJECT_VERSION::$PROJECT_VERSION
        shell: bash
      - name: Display structure of downloaded files
        run: ls -l
        shell: bash
      # - name: 'Set up Visual C Build Tools Workload for Visual Studio 2019 Build Tools on Windows'
      #   if: matrix.os == 'windows-latest'
      #   run: |
      #     choco install visualstudio2019-workload-vctools
      - name: 'Setup GraalVM Environment'
        uses: ayltai/setup-graalvm@v1
        with:
          java-version: 17
          graalvm-version: 22.3.0
          native-image: true
      - name: check java version
        run: java -version
      - name: 'Build Native Image on non-windows'
        if: matrix.os != 'windows-latest'
        run: |
          mvn clean -Pnative native:compile
          ls -l target
      - name: 'Build Native Image on windows'
        if: matrix.os == 'windows-latest'
        run: |
          echo "init vs2022 x64 environment"
          # Visual Studio Enterprise 2022 is installed in github virtual-environments
          # https://github.com/actions/virtual-environments/blob/main/images/win/Windows2022-Readme.md#visual-studio-enterprise-2022
          call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
          echo "build native image"
          call mvn clean -Pnative native:compile
          echo "edit binary resources"
          "./resources/rcedit-x64.exe" target/${{env.APP_NAME}}${{matrix.executable_extension}} --set-icon resources/app_icon.ico --set-file-version ${{ steps.environment.outputs.PROJECT_VERSION }} --set-product-version ${{ steps.environment.outputs.PROJECT_VERSION }}  --set-version-string ProductName ${{env.APP_NAME}} --set-version-string LegalCopyright MIT
          echo "check target outputs"
          dir target
        shell: cmd
      - name: Prepare release files
        run: |
          7z a -tzip $APP_NAME-${{matrix.label}}-${{ steps.environment.outputs.PROJECT_VERSION }}.zip -r ./target/${APP_NAME}${{matrix.executable_extension}}
        shell: bash
      - name: 'Publish binary to release'
        uses: xresloader/upload-to-github-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          file: ${{env.APP_NAME}}-${{matrix.label}}-${{ steps.environment.outputs.PROJECT_VERSION }}.zip
          tags: true
          draft: false
          overwrite: true